This was AI generated.

# RAVEN Discord Bot - In-Depth Configuration Guide

This guide provides a detailed explanation of each function and configuration option available in RAVEN, an AI-powered Discord bot.

## Configuration

### config.json

The `config.json` file contains the main settings for the bot. Customize these settings according to your preferences.

```json
{
    "TARGET_CHANNEL_ID": "discordchannelid",
    "CHANNEL_ID": "discordchannelid",
    "CUSTOM_SYSTEM_MESSAGES": {
        "discorduserid": "your_custom_system_message"
    }
}
```

- `TARGET_CHANNEL_ID`: The ID of the Discord channel where the bot will send random messages generated by GPT-3.
- `CHANNEL_ID`: The ID of the Discord channel where the bot will operate.
- `CUSTOM_SYSTEM_MESSAGES`: A dictionary containing user-specific system messages. The key is the Discord user ID, and the value is the custom system message for that user.

### .env

The `.env` file stores sensitive information, such as API keys and tokens. Make sure to keep this file private and secure.

```
DISCORD_TOKEN=
OPENAI_API_KEY=
PINECONE_API_KEY=
AZURE_CONNECTION_STRING=
```

- `DISCORD_TOKEN`: Your Discord bot token.
- `OPENAI_API_KEY`: Your OpenAI API key for GPT-3 integration.
- `PINECONE_API_KEY`: Your Pinecone API key for vector database management.
- `AZURE_CONNECTION_STRING`: Your Azure connection string for uploading large files to Azure Blob Storage.

## Functions

### set_system_message(ctx, *, system_message: str)

This function allows users to set a custom system message (the bot's personality or directive) for themselves.

Usage: `!set_system_message <message>`

### set_convo_length(ctx, length: int)

This function sets the conversation length (the number of recent messages that the bot considers when generating a response).

Usage: `!set_convo_length <length>`

### improve(ctx)

This command provides suggestions on how to improve the bot's code. It uses GPT-3 to generate the suggestions.

Usage: `!improve`

### convert(ctx, youtube_url: str, output_format: str)

This command downloads and converts YouTube videos to mp3, wav, or mp4 formats.

Usage: `!convert <youtube_url> <output_format>`

### create_custom(ctx, command_name: str, *, command_action: str)

This function allows users to create custom commands with a specified command name and action.

Usage: `!create_custom <command_name> <command_action>`

### custom(ctx, command_name: str)

This function executes a custom command created by the user.

Usage: `!custom <command_name>`

### raven(ctx, *args)

This function generates a response based on user input. It serves as the main command for the bot to process user input and generate responses.

Usage: `!raven <message>`

## Additional Functions

### send_large_message(channel, message, max_chars=2000)

This function sends large messages by splitting them into smaller parts to avoid hitting Discord's character limit.

### process_user_input_cached(user_input, user_id, convo_length=10)

This function, with caching, processes user input and generates a response using GPT-3.

### summarize_website(url)

This function summarizes the content of a given website URL. It supports both static websites (using BeautifulSoup) and dynamic websites like Twitter (using Selenium).

## Custom Commands

Custom commands are stored in separate JSON files for each user. The file naming convention is `custom_commands_<user_id>.json`. Users can create and execute custom commands using the `!create_custom` and `!custom` commands, respectively.
